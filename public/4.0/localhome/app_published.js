parcelRequire=function(e,r,t,n){var i,o="function"==typeof parcelRequire&&parcelRequire,u="function"==typeof require&&require;function f(t,n){if(!r[t]){if(!e[t]){var i="function"==typeof parcelRequire&&parcelRequire;if(!n&&i)return i(t,!0);if(o)return o(t,!0);if(u&&"string"==typeof t)return u(t);var c=new Error("Cannot find module '"+t+"'");throw c.code="MODULE_NOT_FOUND",c}p.resolve=function(r){return e[t][1][r]||r},p.cache={};var l=r[t]=new f.Module(t);e[t][0].call(l.exports,p,l,l.exports,this)}return r[t].exports;function p(e){return f(p.resolve(e))}}f.isParcelRequire=!0,f.Module=function(e){this.id=e,this.bundle=f,this.exports={}},f.modules=e,f.cache=r,f.parent=o,f.register=function(r,t){e[r]=[function(e,r){r.exports=t},{}]};for(var c=0;c<t.length;c++)try{f(t[c])}catch(e){i||(i=e)}if(t.length){var l=f(t[t.length-1]);"object"==typeof exports&&"undefined"!=typeof module?module.exports=l:"function"==typeof define&&define.amd?define(function(){return l}):n&&(this[n]=l)}if(parcelRequire=f,i)throw i;return f}({"QCba":[function(require,module,exports) {
"use strict";var t=smarthome.App,e=smarthome.Constants,o=smarthome.DataFlow,n=smarthome.Execute,r=smarthome.Intents,s=smarthome.IntentFlow,a=smarthome.DataFlow.HttpResponseData;let i={httpPath:"",httpPort:3e3,httpSSL:!1};const l=(t,e)=>({intent:t.inputs[0].intent,requestId:t.requestId,payload:e});class d extends Error{constructor(t){super(),this.requestId=t}throwHandlerError(){throw new s.HandlerError(this.requestId,"invalidRequest","Unknown Instance")}}const c=t=>{console.log("IDENTIFY intent: "+JSON.stringify(t,null,2));const n=t.inputs[0].payload.device;if(!n.mdnsScanData)return console.error(t.requestId,"No usable mdns scan data"),l(t,{});if("fhemconnect._http._tcp.local"!==n.mdnsScanData.serviceName)return console.error(t.requestId,"Not FHEM Connect type"),l(t,{});i.httpPath=n.mdnsScanData.txt.httpPath,i.httpPort=+n.mdnsScanData.txt.httpPort,i.httpSSL=JSON.parse(n.mdnsScanData.txt.httpSSL);const r=new o.HttpRequestData;return r.method=e.HttpOperation.POST,r.requestId=t.requestId,r.deviceId=n.id,r.isSecure=i.httpSSL,r.port=i.httpPort,r.path=i.httpPath,r.data=JSON.stringify(t),r.dataType="application/json",console.log(t.requestId,"Sending",r),u.getDeviceManager().send(r).then(t=>{return console.log("result: "+JSON.stringify(t.httpResponse.body)),JSON.parse(t.httpResponse.body)}).catch(e=>(e.errorCode=e.errorCode||s.ErrorCode.INVALID_REQUEST,l(t,{})))},p=t=>{console.log("REACHABLE_DEVICES intent: "+JSON.stringify(t,null,2));const n=t.inputs[0].payload.device.id,r=new o.HttpRequestData;return r.method=e.HttpOperation.POST,r.requestId=t.requestId,r.deviceId=n,r.isSecure=i.httpSSL,r.port=i.httpPort,r.path=i.httpPath,r.data=JSON.stringify(t),r.dataType="application/json",console.log(t.requestId,"Sending",r),u.getDeviceManager().send(r).then(t=>{return console.log("result: "+JSON.stringify(t.httpResponse.body)),JSON.parse(t.httpResponse.body)}).catch(e=>(e.errorCode=e.errorCode||s.ErrorCode.INVALID_REQUEST,l(t,{})))},h=t=>{console.log("EXECUTE intent: "+JSON.stringify(t,null,2));const n=new o.HttpRequestData;return n.method=e.HttpOperation.POST,n.requestId=t.requestId,n.deviceId=t.inputs[0].payload.commands[0].devices[0].id,n.isSecure=i.httpSSL,n.port=i.httpPort,n.path=i.httpPath,n.data=JSON.stringify(t),n.dataType="application/json",console.log(t.requestId,"Sending",n),u.getDeviceManager().send(n).then(t=>{return console.log("result: "+JSON.stringify(t.httpResponse.body)),JSON.parse(t.httpResponse.body)}).catch(e=>(e.errorCode=e.errorCode||s.ErrorCode.INVALID_REQUEST,l(t,{})))},u=new t("1.0.0");u.onIdentify(c).onReachableDevices(p).onExecute(h).onProxySelected(t=>(console.log("ProxySelected",JSON.stringify(t,null,2)),l(t,{}))).onIndicate(t=>console.log("Indicate",JSON.stringify(t,null,2))).onParseNotification(t=>console.log("ParseNotification",JSON.stringify(t,null,2))).onProvision(t=>console.log("Provision",JSON.stringify(t,null,2))).onQuery(t=>console.log("Query",JSON.stringify(t,null,2))).onRegister(t=>console.log("Register",JSON.stringify(t,null,2))).onUnprovision(t=>console.log("Unprovision",JSON.stringify(t,null,2))).onUpdate(t=>console.log("Update",JSON.stringify(t,null,2))).listen().then(()=>{console.log("Ready!")}).catch(t=>console.error(t));
},{}]},{},["QCba"], null)